#!/bin/sh -ue

# This script installs Nix package manager inside a Termux installation.
# Copyright (c) 2019 Alexander Sosedkin <monk@unboiled.info>

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published
# by the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.


# Based off the official Nix install script (https://nixos.org/nix/install),
# presumably written by Eelco Dolstra.


# This script installs Nix package manager inside a Termux installation.
# It does not require root, user namespaces or disabling SELinux,
# but it relies on proot and numerous hacks instead.
# Only tested with aarch64, may also accidentally work on x86.

# Usage:
# * Install and run Termux
# * Execute this script inside Termux

# Careful, this is carelessly written alpha-quality stuff.


PLAYGROUND="$HOME/.nix"
DIVE_SCRIPT="$PLAYGROUND/nix-powered"
TERMUX_BIN="/data/data/com.termux/files/usr/bin"



oops() {
    echo "$0:" "$@" >&2
    exit 1
}

require_util() {
    command -v "$1" > /dev/null 2>&1 ||
        oops "you do not have '$1' installed, which I need to $2"
}

if [ ! -x "$DIVE_SCRIPT" ]; then
	echo "removing the previous installation..."
	chmod -R 700 "$PLAYGROUND" || true
	rm -rf "$PLAYGROUND" || oops "failed to remove $PLAYGROUND"
	mkdir -p "$PLAYGROUND" || oops "failed to create $PLAYGROUND"

	echo "installing tools..."
	pkg install -y proot bzip2 tar wget || oops "failed to install required tools"

	tmpDir="$PLAYGROUND/tmp"
	mkdir -p "$tmpDir" || oops "false to create $tmpDir"

	echo "preparing mock /nix and /etc..."
	mkdir "$PLAYGROUND/nix" || oops "failed to create $PLAYGROUND/nix"
	mkdir "$PLAYGROUND/etc" || oops "failed to create $PLAYGROUND/etc"
	echo 'nameserver 1.1.1.1' > "$PLAYGROUND/etc/resolv.conf" || oops "failed to create $PLAYGROUND/etc/resolv.conf"
	mkdir "$PLAYGROUND/etc/nix/" || oops "failed to create $PLAYGROUND/etc/nix"
	# https://github.com/NixOS/nix/issues/2632#issuecomment-457610729
	echo 'sandbox = false' > "$PLAYGROUND/etc/nix/nix.conf" || oops "failed to create $PLAYGROUND/etc/nix/nix.conf"

	case "$(uname -s).$(uname -m)" in
		Linux.x86_64)
        hash=0a0f8380a581c98bc813e31b6b38ecbca075ef6be2c90b8da6c89766a7cd501d
        path=ml60s224bjsc53jkdjr171kyi8g10kap/nix-2.22.1-x86_64-linux.tar.xz
			system=x86_64-linux
			;;
		Linux.i?86)
        hash=ce359e545f3758e563d3bbd6668ab1b8028ab73336f4cdb7e29181e9b282c43b
        path=n2dranancfhwiqc4nkc6k89z9aj45ppy/nix-2.22.1-i686-linux.tar.xz
			system=i686-linux
			;;
		Linux.aarch64)
        hash=3694481327ee34edb8aef1107bb7dd569a604b6707653e36802b9192d576c4df
        path=8s8yqgs5iscyf56qg9cipgbykg9n7yx9/nix-2.22.1-aarch64-linux.tar.xz
			system=aarch64-linux
			;;
		Linux.armv6l)
        hash=44aaaff746ca9da964f961d916c6d33820468cbfcb6f4323d394409b5b4ee5f6
        path=0l0bxii1r4qn0byqhn4pws0ncjsvgrfv/nix-2.22.1-armv6l-linux.tar.xz
			system=armv6l-linux
			;;
		Linux.armv7l)
        hash=59f624f7b2375a1acbb8e7bcffc35bdd6e588d374d026d1797deb53784200685
        path=g3bx9fs23c7w2s0v063ik4n0g8mwac1j/nix-2.22.1-armv7l-linux.tar.xz
			system=armv7l-linux
			;;
		Darwin.x86_64)
        hash=fc7415d8d28b94ff1959c3a670430b0c9804e5dcb281b1a36e8646860397e656
        path=56iy2576f73v5yrcn6l8fqsz51mlf2dr/nix-2.22.1-x86_64-darwin.tar.xz
			system=x86_64-darwin
			;;
		Darwin.arm64|Darwin.aarch64)
        hash=1cc1cb82e744e853b8d2c6fe075a1048c3600a404b4b8894ae892bf24258ca37
        path=1c4gbsd8kmx2zkd2pasarmkvafcpwvsm/nix-2.22.1-aarch64-darwin.tar.xz
			system=aarch64-darwin
			;;
		*) oops "sorry, there is no binary distribution of Nix for your platform";;
	esac

# Use this command-line option to fetch the tarballs using nar-serve or Cachix
if [ "${1:-}" = "--tarball-url-prefix" ]; then
    if [ -z "${2:-}" ]; then
        oops "missing argument for --tarball-url-prefix"
    fi
    url=${2}/${path}
    shift 2
else
	url=https://releases.nixos.org/nix/nix-2.22.1/nix-2.22.1-$system.tar.xz
fi

	tarball=$tmpDir/nix-2.22.1-$system.tar.xz

require_util tar "unpack the binary tarball"
if [ "$(uname -s)" != "Darwin" ]; then
    require_util xz "unpack the binary tarball"
fi

if command -v curl > /dev/null 2>&1; then
    fetch() { curl --fail -L "$1" -o "$2"; }
elif command -v wget > /dev/null 2>&1; then
    fetch() { wget "$1" -O "$2"; }
else
    oops "you don't have wget or curl installed, which I need to download the binary tarball"
fi

	echo "downloading Nix 2.22.1 binary tarball for $system from '$url' to '$tmpDir'..."
fetch "$url" "$tarball" || oops "failed to download '$url'"

if command -v sha256sum > /dev/null 2>&1; then
	hash2="$(sha256sum -b "$tarball" | cut -c1-64)"
elif command -v shasum > /dev/null 2>&1; then
    hash2="$(shasum -a 256 -b "$tarball" | cut -c1-64)"
elif command -v openssl > /dev/null 2>&1; then
    hash2="$(openssl dgst -r -sha256 "$tarball" | cut -c1-64)"
else
    oops "cannot verify the SHA-256 hash of '$url'; you need one of 'shasum', 'sha256sum', or 'openssl'"
fi

	if [ "$hash" != "$hash2" ]; then
		oops "SHA-256 hash mismatch in '$url'; expected $hash, got $hash2"
	fi

	echo "unpacking $tarball..."
	unpack=$tmpDir/unpack
	mkdir -p "$unpack"
tar -xJf "$tarball" -C "$unpack" || oops "failed to unpack '$url'"

	script=$(echo "$unpack"/*/install)

	[ -e "$script" ] || oops "installation script is missing from the binary tarball!"

	INTERMEDIATE_SCRIPT="$tmpDir/intermediate_install_script"
	{
########
	cat > "$INTERMEDIATE_SCRIPT" << --------EOF
	export USER=\$(whoami)
	export NIX_INSTALLER_NO_MODIFY_PROFILE=true
	unset LD_LIBRARY_PATH
	unset LD_PRELOAD
	$script "\$@"
--------EOF
	} || oops "failed to create $INTERMEDIATE_SCRIPT"

	chmod +x "$INTERMEDIATE_SCRIPT" || oops "failed to chmod +x $INTERMEDIATE_SCRIPT"

	echo "running Nix install script in proot..."
	proot \
		-b "$PLAYGROUND/nix:/nix" \
		-b "$PLAYGROUND/etc:/etc" \
		--link2symlink \
		"$INTERMEDIATE_SCRIPT" || oops "failed to run Nix install script in proot"

	echo "creating $DIVE_SCRIPT and finalizing the installation..."
	{
########
	cat > "$DIVE_SCRIPT" << --------EOF
	#!/bin/sh -e
	export PS1="nix-powered> "
	export USER=$(whoami)
	unset LD_LIBRARY_PATH
	unset LD_PRELOAD
	echo Termux PATH \$PATH
	TERMUX_PATH="\$PATH"
	. \$HOME/.nix-profile/etc/profile.d/nix.sh
	export PATH=\${PATH%":\$TERMUX_PATH"}
	"\$@"
--------EOF
	} || oops "failed to create $DIVE_SCRIPT"
	chmod +x "$DIVE_SCRIPT" || oops "failed to chmod +x $DIVE_SCRIPT"

	echo "installation is completed."

	echo "to reinstall, rm -r \"$PLAYGROUND\" and re-run the script"
fi


proot \
	-b "$PLAYGROUND/nix:/nix" \
	-b "$PLAYGROUND/etc:/etc" \
	-b "/etc:/android-etc" \
	--link2symlink \
	"$DIVE_SCRIPT" "$@"
